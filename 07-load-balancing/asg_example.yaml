AWSTemplateFormatVersion: '2010-09-09'
Resources:
  WebServerAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: 'AutomationBoxes-Mike-Training'
      VPCZoneIdentifier:
        - subnet-09c0cbff749deae9e
        - subnet-0b94bee36b9a5fb63
      DesiredCapacity: '3'
      HealthCheckType: 'ELB'
      HealthCheckGracePeriod: 30 
      LaunchConfigurationName: !Ref WebServersLC
      MaxSize: '3'
      MinSize: '3'
      TargetGroupARNs: 
        - !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: vpc-0eda4c5321822a055
      TargetType: instance
      HealthCheckPath: /index.html
      Port: 80
      Protocol: HTTP

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
        - 'subnet-09c0cbff749deae9e'
        - 'subnet-0b94bee36b9a5fb63'

  HTTPListener:
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"


  HTTPSListener:
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-FS-1-2-Res-2020-10"
      Certificates: 
        - "arn:aws:acm:us-east-1:324320755747:certificate/ab2b0869-750d-4d4d-aa06-c289c02d935f"

  FWDRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      ListenerArn: !Ref HTTPListener
      Conditions:
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - POST
              - GET
      Priority: 2


  WebServersLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: 'ami-0ff8a91507f77f867'
      InstanceType: 't2.micro'
      LaunchConfigurationName: 'Mike-Training-WebServerLC'
      # SecurityGroups:
      #   - 'sg-0c1617312e6017ae4'
      UserData: 
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe

            yum install -y aws-cfn-bootstrap

            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource WebServersLC \
              --configsets All \
              --region ${AWS::Region}

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource WebServersLC \
              --region ${AWS::Region}

    Metadata:
     'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureStelligentProject
        ConfigureStelligentProject:
          packages:
            yum:
              nginx: []
          files:
            /usr/share/nginx/html/index.html:
              content: '<p>Automation for the People</p>'
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'





